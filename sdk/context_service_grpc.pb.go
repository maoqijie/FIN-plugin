// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: context_service.proto

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContextService_Log_FullMethodName                        = "/sdk.ContextService/Log"
	ContextService_LogInfo_FullMethodName                    = "/sdk.ContextService/LogInfo"
	ContextService_LogSuccess_FullMethodName                 = "/sdk.ContextService/LogSuccess"
	ContextService_LogWarning_FullMethodName                 = "/sdk.ContextService/LogWarning"
	ContextService_LogError_FullMethodName                   = "/sdk.ContextService/LogError"
	ContextService_GetPluginName_FullMethodName              = "/sdk.ContextService/GetPluginName"
	ContextService_GetBotInfo_FullMethodName                 = "/sdk.ContextService/GetBotInfo"
	ContextService_GetServerInfo_FullMethodName              = "/sdk.ContextService/GetServerInfo"
	ContextService_GetQQInfo_FullMethodName                  = "/sdk.ContextService/GetQQInfo"
	ContextService_GetInterworkInfo_FullMethodName           = "/sdk.ContextService/GetInterworkInfo"
	ContextService_GetDataPath_FullMethodName                = "/sdk.ContextService/GetDataPath"
	ContextService_FormatDataPath_FullMethodName             = "/sdk.ContextService/FormatDataPath"
	ContextService_SayTo_FullMethodName                      = "/sdk.ContextService/SayTo"
	ContextService_RegisterConsoleCommand_FullMethodName     = "/sdk.ContextService/RegisterConsoleCommand"
	ContextService_RegisterChatHandler_FullMethodName        = "/sdk.ContextService/RegisterChatHandler"
	ContextService_RegisterPlayerJoinHandler_FullMethodName  = "/sdk.ContextService/RegisterPlayerJoinHandler"
	ContextService_RegisterPlayerLeaveHandler_FullMethodName = "/sdk.ContextService/RegisterPlayerLeaveHandler"
	ContextService_RegisterPacketHandler_FullMethodName      = "/sdk.ContextService/RegisterPacketHandler"
	ContextService_RegisterPacketAllHandler_FullMethodName   = "/sdk.ContextService/RegisterPacketAllHandler"
	ContextService_RegisterPreloadHandler_FullMethodName     = "/sdk.ContextService/RegisterPreloadHandler"
	ContextService_RegisterActiveHandler_FullMethodName      = "/sdk.ContextService/RegisterActiveHandler"
	ContextService_RegisterFrameExitHandler_FullMethodName   = "/sdk.ContextService/RegisterFrameExitHandler"
	ContextService_RegisterBroadcastHandler_FullMethodName   = "/sdk.ContextService/RegisterBroadcastHandler"
	ContextService_CancelMessage_FullMethodName              = "/sdk.ContextService/CancelMessage"
	ContextService_WaitMessage_FullMethodName                = "/sdk.ContextService/WaitMessage"
	ContextService_TriggerBroadcast_FullMethodName           = "/sdk.ContextService/TriggerBroadcast"
)

// ContextServiceClient is the client API for ContextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContextServiceClient interface {
	// 日志方法
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	LogInfo(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	LogSuccess(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	LogWarning(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	LogError(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// 信息查询
	GetPluginName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	GetBotInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BotInfoResponse, error)
	GetServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfoResponse, error)
	GetQQInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QQInfoResponse, error)
	GetInterworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InterworkInfoResponse, error)
	// 路径方法
	GetDataPath(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	FormatDataPath(ctx context.Context, in *FormatDataPathRequest, opts ...grpc.CallOption) (*StringResponse, error)
	// 游戏工具方法
	SayTo(ctx context.Context, in *SayToRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	// 控制台命令注册
	RegisterConsoleCommand(ctx context.Context, in *RegisterConsoleCommandRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	// 事件注册（返回 callback_id）
	RegisterChatHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterPlayerJoinHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterPlayerLeaveHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterPacketHandler(ctx context.Context, in *RegisterPacketHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterPacketAllHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterPreloadHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterActiveHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterFrameExitHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	RegisterBroadcastHandler(ctx context.Context, in *RegisterBroadcastHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	// 消息控制
	CancelMessage(ctx context.Context, in *CancelMessageRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	WaitMessage(ctx context.Context, in *WaitMessageRequest, opts ...grpc.CallOption) (*WaitMessageResponse, error)
	// 广播
	TriggerBroadcast(ctx context.Context, in *TriggerBroadcastRequest, opts ...grpc.CallOption) (*TriggerBroadcastResponse, error)
}

type contextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContextServiceClient(cc grpc.ClientConnInterface) ContextServiceClient {
	return &contextServiceClient{cc}
}

func (c *contextServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, ContextService_Log_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) LogInfo(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, ContextService_LogInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) LogSuccess(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, ContextService_LogSuccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) LogWarning(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, ContextService_LogWarning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) LogError(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, ContextService_LogError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetPluginName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, ContextService_GetPluginName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetBotInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BotInfoResponse, error) {
	out := new(BotInfoResponse)
	err := c.cc.Invoke(ctx, ContextService_GetBotInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, ContextService_GetServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetQQInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QQInfoResponse, error) {
	out := new(QQInfoResponse)
	err := c.cc.Invoke(ctx, ContextService_GetQQInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetInterworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InterworkInfoResponse, error) {
	out := new(InterworkInfoResponse)
	err := c.cc.Invoke(ctx, ContextService_GetInterworkInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetDataPath(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, ContextService_GetDataPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) FormatDataPath(ctx context.Context, in *FormatDataPathRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, ContextService_FormatDataPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) SayTo(ctx context.Context, in *SayToRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ContextService_SayTo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterConsoleCommand(ctx context.Context, in *RegisterConsoleCommandRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterConsoleCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterChatHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterChatHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterPlayerJoinHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterPlayerJoinHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterPlayerLeaveHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterPlayerLeaveHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterPacketHandler(ctx context.Context, in *RegisterPacketHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterPacketHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterPacketAllHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterPacketAllHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterPreloadHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterPreloadHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterActiveHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterActiveHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterFrameExitHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterFrameExitHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) RegisterBroadcastHandler(ctx context.Context, in *RegisterBroadcastHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, ContextService_RegisterBroadcastHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) CancelMessage(ctx context.Context, in *CancelMessageRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ContextService_CancelMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) WaitMessage(ctx context.Context, in *WaitMessageRequest, opts ...grpc.CallOption) (*WaitMessageResponse, error) {
	out := new(WaitMessageResponse)
	err := c.cc.Invoke(ctx, ContextService_WaitMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) TriggerBroadcast(ctx context.Context, in *TriggerBroadcastRequest, opts ...grpc.CallOption) (*TriggerBroadcastResponse, error) {
	out := new(TriggerBroadcastResponse)
	err := c.cc.Invoke(ctx, ContextService_TriggerBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextServiceServer is the server API for ContextService service.
// All implementations must embed UnimplementedContextServiceServer
// for forward compatibility
type ContextServiceServer interface {
	// 日志方法
	Log(context.Context, *LogRequest) (*LogResponse, error)
	LogInfo(context.Context, *LogRequest) (*LogResponse, error)
	LogSuccess(context.Context, *LogRequest) (*LogResponse, error)
	LogWarning(context.Context, *LogRequest) (*LogResponse, error)
	LogError(context.Context, *LogRequest) (*LogResponse, error)
	// 信息查询
	GetPluginName(context.Context, *Empty) (*StringResponse, error)
	GetBotInfo(context.Context, *Empty) (*BotInfoResponse, error)
	GetServerInfo(context.Context, *Empty) (*ServerInfoResponse, error)
	GetQQInfo(context.Context, *Empty) (*QQInfoResponse, error)
	GetInterworkInfo(context.Context, *Empty) (*InterworkInfoResponse, error)
	// 路径方法
	GetDataPath(context.Context, *Empty) (*StringResponse, error)
	FormatDataPath(context.Context, *FormatDataPathRequest) (*StringResponse, error)
	// 游戏工具方法
	SayTo(context.Context, *SayToRequest) (*BoolResponse, error)
	// 控制台命令注册
	RegisterConsoleCommand(context.Context, *RegisterConsoleCommandRequest) (*BoolResponse, error)
	// 事件注册（返回 callback_id）
	RegisterChatHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterPlayerJoinHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterPlayerLeaveHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterPacketHandler(context.Context, *RegisterPacketHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterPacketAllHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterPreloadHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterActiveHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterFrameExitHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	RegisterBroadcastHandler(context.Context, *RegisterBroadcastHandlerRequest) (*RegisterHandlerResponse, error)
	// 消息控制
	CancelMessage(context.Context, *CancelMessageRequest) (*BoolResponse, error)
	WaitMessage(context.Context, *WaitMessageRequest) (*WaitMessageResponse, error)
	// 广播
	TriggerBroadcast(context.Context, *TriggerBroadcastRequest) (*TriggerBroadcastResponse, error)
	mustEmbedUnimplementedContextServiceServer()
}

// UnimplementedContextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContextServiceServer struct {
}

func (UnimplementedContextServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedContextServiceServer) LogInfo(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInfo not implemented")
}
func (UnimplementedContextServiceServer) LogSuccess(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogSuccess not implemented")
}
func (UnimplementedContextServiceServer) LogWarning(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogWarning not implemented")
}
func (UnimplementedContextServiceServer) LogError(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogError not implemented")
}
func (UnimplementedContextServiceServer) GetPluginName(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginName not implemented")
}
func (UnimplementedContextServiceServer) GetBotInfo(context.Context, *Empty) (*BotInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotInfo not implemented")
}
func (UnimplementedContextServiceServer) GetServerInfo(context.Context, *Empty) (*ServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedContextServiceServer) GetQQInfo(context.Context, *Empty) (*QQInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQQInfo not implemented")
}
func (UnimplementedContextServiceServer) GetInterworkInfo(context.Context, *Empty) (*InterworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterworkInfo not implemented")
}
func (UnimplementedContextServiceServer) GetDataPath(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPath not implemented")
}
func (UnimplementedContextServiceServer) FormatDataPath(context.Context, *FormatDataPathRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatDataPath not implemented")
}
func (UnimplementedContextServiceServer) SayTo(context.Context, *SayToRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayTo not implemented")
}
func (UnimplementedContextServiceServer) RegisterConsoleCommand(context.Context, *RegisterConsoleCommandRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConsoleCommand not implemented")
}
func (UnimplementedContextServiceServer) RegisterChatHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChatHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterPlayerJoinHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlayerJoinHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterPlayerLeaveHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlayerLeaveHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterPacketHandler(context.Context, *RegisterPacketHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPacketHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterPacketAllHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPacketAllHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterPreloadHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPreloadHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterActiveHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterActiveHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterFrameExitHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFrameExitHandler not implemented")
}
func (UnimplementedContextServiceServer) RegisterBroadcastHandler(context.Context, *RegisterBroadcastHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBroadcastHandler not implemented")
}
func (UnimplementedContextServiceServer) CancelMessage(context.Context, *CancelMessageRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMessage not implemented")
}
func (UnimplementedContextServiceServer) WaitMessage(context.Context, *WaitMessageRequest) (*WaitMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitMessage not implemented")
}
func (UnimplementedContextServiceServer) TriggerBroadcast(context.Context, *TriggerBroadcastRequest) (*TriggerBroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerBroadcast not implemented")
}
func (UnimplementedContextServiceServer) mustEmbedUnimplementedContextServiceServer() {}

// UnsafeContextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextServiceServer will
// result in compilation errors.
type UnsafeContextServiceServer interface {
	mustEmbedUnimplementedContextServiceServer()
}

func RegisterContextServiceServer(s grpc.ServiceRegistrar, srv ContextServiceServer) {
	s.RegisterService(&ContextService_ServiceDesc, srv)
}

func _ContextService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_LogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).LogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_LogInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).LogInfo(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_LogSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).LogSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_LogSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).LogSuccess(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_LogWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).LogWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_LogWarning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).LogWarning(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_LogError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).LogError(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetPluginName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetPluginName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetPluginName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetPluginName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetBotInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetBotInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetServerInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetQQInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetQQInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetQQInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetQQInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetInterworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetInterworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetInterworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetInterworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetDataPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetDataPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetDataPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetDataPath(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_FormatDataPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatDataPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).FormatDataPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_FormatDataPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).FormatDataPath(ctx, req.(*FormatDataPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_SayTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).SayTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_SayTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).SayTo(ctx, req.(*SayToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterConsoleCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConsoleCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterConsoleCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterConsoleCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterConsoleCommand(ctx, req.(*RegisterConsoleCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterChatHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterChatHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterChatHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterChatHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterPlayerJoinHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterPlayerJoinHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterPlayerJoinHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterPlayerJoinHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterPlayerLeaveHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterPlayerLeaveHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterPlayerLeaveHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterPlayerLeaveHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterPacketHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPacketHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterPacketHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterPacketHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterPacketHandler(ctx, req.(*RegisterPacketHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterPacketAllHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterPacketAllHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterPacketAllHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterPacketAllHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterPreloadHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterPreloadHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterPreloadHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterPreloadHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterActiveHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterActiveHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterActiveHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterActiveHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterFrameExitHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterFrameExitHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterFrameExitHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterFrameExitHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_RegisterBroadcastHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBroadcastHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).RegisterBroadcastHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_RegisterBroadcastHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).RegisterBroadcastHandler(ctx, req.(*RegisterBroadcastHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_CancelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).CancelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_CancelMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).CancelMessage(ctx, req.(*CancelMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_WaitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).WaitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_WaitMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).WaitMessage(ctx, req.(*WaitMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_TriggerBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).TriggerBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_TriggerBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).TriggerBroadcast(ctx, req.(*TriggerBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContextService_ServiceDesc is the grpc.ServiceDesc for ContextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.ContextService",
	HandlerType: (*ContextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _ContextService_Log_Handler,
		},
		{
			MethodName: "LogInfo",
			Handler:    _ContextService_LogInfo_Handler,
		},
		{
			MethodName: "LogSuccess",
			Handler:    _ContextService_LogSuccess_Handler,
		},
		{
			MethodName: "LogWarning",
			Handler:    _ContextService_LogWarning_Handler,
		},
		{
			MethodName: "LogError",
			Handler:    _ContextService_LogError_Handler,
		},
		{
			MethodName: "GetPluginName",
			Handler:    _ContextService_GetPluginName_Handler,
		},
		{
			MethodName: "GetBotInfo",
			Handler:    _ContextService_GetBotInfo_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _ContextService_GetServerInfo_Handler,
		},
		{
			MethodName: "GetQQInfo",
			Handler:    _ContextService_GetQQInfo_Handler,
		},
		{
			MethodName: "GetInterworkInfo",
			Handler:    _ContextService_GetInterworkInfo_Handler,
		},
		{
			MethodName: "GetDataPath",
			Handler:    _ContextService_GetDataPath_Handler,
		},
		{
			MethodName: "FormatDataPath",
			Handler:    _ContextService_FormatDataPath_Handler,
		},
		{
			MethodName: "SayTo",
			Handler:    _ContextService_SayTo_Handler,
		},
		{
			MethodName: "RegisterConsoleCommand",
			Handler:    _ContextService_RegisterConsoleCommand_Handler,
		},
		{
			MethodName: "RegisterChatHandler",
			Handler:    _ContextService_RegisterChatHandler_Handler,
		},
		{
			MethodName: "RegisterPlayerJoinHandler",
			Handler:    _ContextService_RegisterPlayerJoinHandler_Handler,
		},
		{
			MethodName: "RegisterPlayerLeaveHandler",
			Handler:    _ContextService_RegisterPlayerLeaveHandler_Handler,
		},
		{
			MethodName: "RegisterPacketHandler",
			Handler:    _ContextService_RegisterPacketHandler_Handler,
		},
		{
			MethodName: "RegisterPacketAllHandler",
			Handler:    _ContextService_RegisterPacketAllHandler_Handler,
		},
		{
			MethodName: "RegisterPreloadHandler",
			Handler:    _ContextService_RegisterPreloadHandler_Handler,
		},
		{
			MethodName: "RegisterActiveHandler",
			Handler:    _ContextService_RegisterActiveHandler_Handler,
		},
		{
			MethodName: "RegisterFrameExitHandler",
			Handler:    _ContextService_RegisterFrameExitHandler_Handler,
		},
		{
			MethodName: "RegisterBroadcastHandler",
			Handler:    _ContextService_RegisterBroadcastHandler_Handler,
		},
		{
			MethodName: "CancelMessage",
			Handler:    _ContextService_CancelMessage_Handler,
		},
		{
			MethodName: "WaitMessage",
			Handler:    _ContextService_WaitMessage_Handler,
		},
		{
			MethodName: "TriggerBroadcast",
			Handler:    _ContextService_TriggerBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "context_service.proto",
}
