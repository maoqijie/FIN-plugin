// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: callback_service.proto

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CallbackService_OnChatEvent_FullMethodName        = "/sdk.CallbackService/OnChatEvent"
	CallbackService_OnPlayerJoinEvent_FullMethodName  = "/sdk.CallbackService/OnPlayerJoinEvent"
	CallbackService_OnPlayerLeaveEvent_FullMethodName = "/sdk.CallbackService/OnPlayerLeaveEvent"
	CallbackService_OnPacketEvent_FullMethodName      = "/sdk.CallbackService/OnPacketEvent"
	CallbackService_OnPreloadEvent_FullMethodName     = "/sdk.CallbackService/OnPreloadEvent"
	CallbackService_OnActiveEvent_FullMethodName      = "/sdk.CallbackService/OnActiveEvent"
	CallbackService_OnFrameExitEvent_FullMethodName   = "/sdk.CallbackService/OnFrameExitEvent"
	CallbackService_OnBroadcastEvent_FullMethodName   = "/sdk.CallbackService/OnBroadcastEvent"
	CallbackService_OnConsoleCommand_FullMethodName   = "/sdk.CallbackService/OnConsoleCommand"
)

// CallbackServiceClient is the client API for CallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackServiceClient interface {
	// 事件回调
	OnChatEvent(ctx context.Context, in *ChatEventRequest, opts ...grpc.CallOption) (*ChatEventResponse, error)
	OnPlayerJoinEvent(ctx context.Context, in *PlayerEventRequest, opts ...grpc.CallOption) (*PlayerEventResponse, error)
	OnPlayerLeaveEvent(ctx context.Context, in *PlayerEventRequest, opts ...grpc.CallOption) (*PlayerEventResponse, error)
	OnPacketEvent(ctx context.Context, in *PacketEventRequest, opts ...grpc.CallOption) (*PacketEventResponse, error)
	OnPreloadEvent(ctx context.Context, in *PreloadEventRequest, opts ...grpc.CallOption) (*PreloadEventResponse, error)
	OnActiveEvent(ctx context.Context, in *ActiveEventRequest, opts ...grpc.CallOption) (*ActiveEventResponse, error)
	OnFrameExitEvent(ctx context.Context, in *FrameExitEventRequest, opts ...grpc.CallOption) (*FrameExitEventResponse, error)
	OnBroadcastEvent(ctx context.Context, in *BroadcastEventRequest, opts ...grpc.CallOption) (*BroadcastEventResponse, error)
	// 控制台命令回调
	OnConsoleCommand(ctx context.Context, in *ConsoleCommandRequest, opts ...grpc.CallOption) (*ConsoleCommandResponse, error)
}

type callbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackServiceClient(cc grpc.ClientConnInterface) CallbackServiceClient {
	return &callbackServiceClient{cc}
}

func (c *callbackServiceClient) OnChatEvent(ctx context.Context, in *ChatEventRequest, opts ...grpc.CallOption) (*ChatEventResponse, error) {
	out := new(ChatEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnChatEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnPlayerJoinEvent(ctx context.Context, in *PlayerEventRequest, opts ...grpc.CallOption) (*PlayerEventResponse, error) {
	out := new(PlayerEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnPlayerJoinEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnPlayerLeaveEvent(ctx context.Context, in *PlayerEventRequest, opts ...grpc.CallOption) (*PlayerEventResponse, error) {
	out := new(PlayerEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnPlayerLeaveEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnPacketEvent(ctx context.Context, in *PacketEventRequest, opts ...grpc.CallOption) (*PacketEventResponse, error) {
	out := new(PacketEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnPacketEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnPreloadEvent(ctx context.Context, in *PreloadEventRequest, opts ...grpc.CallOption) (*PreloadEventResponse, error) {
	out := new(PreloadEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnPreloadEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnActiveEvent(ctx context.Context, in *ActiveEventRequest, opts ...grpc.CallOption) (*ActiveEventResponse, error) {
	out := new(ActiveEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnActiveEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnFrameExitEvent(ctx context.Context, in *FrameExitEventRequest, opts ...grpc.CallOption) (*FrameExitEventResponse, error) {
	out := new(FrameExitEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnFrameExitEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnBroadcastEvent(ctx context.Context, in *BroadcastEventRequest, opts ...grpc.CallOption) (*BroadcastEventResponse, error) {
	out := new(BroadcastEventResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnBroadcastEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) OnConsoleCommand(ctx context.Context, in *ConsoleCommandRequest, opts ...grpc.CallOption) (*ConsoleCommandResponse, error) {
	out := new(ConsoleCommandResponse)
	err := c.cc.Invoke(ctx, CallbackService_OnConsoleCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackServiceServer is the server API for CallbackService service.
// All implementations must embed UnimplementedCallbackServiceServer
// for forward compatibility
type CallbackServiceServer interface {
	// 事件回调
	OnChatEvent(context.Context, *ChatEventRequest) (*ChatEventResponse, error)
	OnPlayerJoinEvent(context.Context, *PlayerEventRequest) (*PlayerEventResponse, error)
	OnPlayerLeaveEvent(context.Context, *PlayerEventRequest) (*PlayerEventResponse, error)
	OnPacketEvent(context.Context, *PacketEventRequest) (*PacketEventResponse, error)
	OnPreloadEvent(context.Context, *PreloadEventRequest) (*PreloadEventResponse, error)
	OnActiveEvent(context.Context, *ActiveEventRequest) (*ActiveEventResponse, error)
	OnFrameExitEvent(context.Context, *FrameExitEventRequest) (*FrameExitEventResponse, error)
	OnBroadcastEvent(context.Context, *BroadcastEventRequest) (*BroadcastEventResponse, error)
	// 控制台命令回调
	OnConsoleCommand(context.Context, *ConsoleCommandRequest) (*ConsoleCommandResponse, error)
	mustEmbedUnimplementedCallbackServiceServer()
}

// UnimplementedCallbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackServiceServer struct {
}

func (UnimplementedCallbackServiceServer) OnChatEvent(context.Context, *ChatEventRequest) (*ChatEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnChatEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnPlayerJoinEvent(context.Context, *PlayerEventRequest) (*PlayerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPlayerJoinEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnPlayerLeaveEvent(context.Context, *PlayerEventRequest) (*PlayerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPlayerLeaveEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnPacketEvent(context.Context, *PacketEventRequest) (*PacketEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPacketEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnPreloadEvent(context.Context, *PreloadEventRequest) (*PreloadEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPreloadEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnActiveEvent(context.Context, *ActiveEventRequest) (*ActiveEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnActiveEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnFrameExitEvent(context.Context, *FrameExitEventRequest) (*FrameExitEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnFrameExitEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnBroadcastEvent(context.Context, *BroadcastEventRequest) (*BroadcastEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBroadcastEvent not implemented")
}
func (UnimplementedCallbackServiceServer) OnConsoleCommand(context.Context, *ConsoleCommandRequest) (*ConsoleCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConsoleCommand not implemented")
}
func (UnimplementedCallbackServiceServer) mustEmbedUnimplementedCallbackServiceServer() {}

// UnsafeCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackServiceServer will
// result in compilation errors.
type UnsafeCallbackServiceServer interface {
	mustEmbedUnimplementedCallbackServiceServer()
}

func RegisterCallbackServiceServer(s grpc.ServiceRegistrar, srv CallbackServiceServer) {
	s.RegisterService(&CallbackService_ServiceDesc, srv)
}

func _CallbackService_OnChatEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnChatEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnChatEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnChatEvent(ctx, req.(*ChatEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnPlayerJoinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnPlayerJoinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnPlayerJoinEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnPlayerJoinEvent(ctx, req.(*PlayerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnPlayerLeaveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnPlayerLeaveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnPlayerLeaveEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnPlayerLeaveEvent(ctx, req.(*PlayerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnPacketEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnPacketEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnPacketEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnPacketEvent(ctx, req.(*PacketEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnPreloadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreloadEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnPreloadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnPreloadEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnPreloadEvent(ctx, req.(*PreloadEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnActiveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnActiveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnActiveEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnActiveEvent(ctx, req.(*ActiveEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnFrameExitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameExitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnFrameExitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnFrameExitEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnFrameExitEvent(ctx, req.(*FrameExitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnBroadcastEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnBroadcastEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnBroadcastEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnBroadcastEvent(ctx, req.(*BroadcastEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_OnConsoleCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).OnConsoleCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_OnConsoleCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).OnConsoleCommand(ctx, req.(*ConsoleCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallbackService_ServiceDesc is the grpc.ServiceDesc for CallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.CallbackService",
	HandlerType: (*CallbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnChatEvent",
			Handler:    _CallbackService_OnChatEvent_Handler,
		},
		{
			MethodName: "OnPlayerJoinEvent",
			Handler:    _CallbackService_OnPlayerJoinEvent_Handler,
		},
		{
			MethodName: "OnPlayerLeaveEvent",
			Handler:    _CallbackService_OnPlayerLeaveEvent_Handler,
		},
		{
			MethodName: "OnPacketEvent",
			Handler:    _CallbackService_OnPacketEvent_Handler,
		},
		{
			MethodName: "OnPreloadEvent",
			Handler:    _CallbackService_OnPreloadEvent_Handler,
		},
		{
			MethodName: "OnActiveEvent",
			Handler:    _CallbackService_OnActiveEvent_Handler,
		},
		{
			MethodName: "OnFrameExitEvent",
			Handler:    _CallbackService_OnFrameExitEvent_Handler,
		},
		{
			MethodName: "OnBroadcastEvent",
			Handler:    _CallbackService_OnBroadcastEvent_Handler,
		},
		{
			MethodName: "OnConsoleCommand",
			Handler:    _CallbackService_OnConsoleCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "callback_service.proto",
}
